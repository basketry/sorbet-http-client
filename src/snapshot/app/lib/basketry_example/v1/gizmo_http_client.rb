# This code was generated by @basketry/sorbet-http-client@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.
#
# To make changes to the contents of this file:
# 1. Edit source/path.ext
# 2. Run the Basketry CLI
#
# About Basketry: https://github.com/basketry/basketry/wiki
# About @basketry/sorbet-http-client: https://github.com/basketry/sorbet-http-client#readme

# frozen_string_literal: true

# typed: strict

module BasketryExample::V1
  class GizmoHttpClient
    extend T::Sig

    include BasketryExample::V1::GizmoService
    include BasketryExample::V1::HttpClientHelpers

    sig { params(api_root: String, oauth2_auth: String).void }
    def initialize(api_root:, oauth2_auth:)
      @api_root = api_root
      @oauth2_auth = oauth2_auth
    end

    # Has a summary in addition to a description
    # Has a description in addition to a summary
    sig do
      override.params(
        size: T.nilable(BasketryExample::V1::Enums::CreateGizmoSize)
      ).returns(
        BasketryExample::V1::Types::Gizmo
      )
    end
    def create_gizmo(size: nil)
      safe_internal_uri = URI("#{@api_root}/v1/gizmos")
      safe_internal_uri.query = URI.encode_www_form(
        {
          'size': size,
        }.compact
      )
      safe_internal_req = Net::HTTP::Post.new(safe_internal_uri)
      safe_internal_res = Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
      map_dto_to_gizmo(JSON.parse(safe_internal_res.body))
    end

    # Only has a summary
    sig do
      override.params(
        search: T.nilable(String)
      ).returns(
        BasketryExample::V1::Types::GizmosResponse
      )
    end
    def get_gizmos(search: nil)
      safe_internal_uri = URI("#{@api_root}/v1/gizmos")
      safe_internal_uri.query = URI.encode_www_form(
        {
          'search': search,
        }.compact
      )
      safe_internal_req = Net::HTTP::Get.new(safe_internal_uri)
      safe_internal_res = Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
      map_dto_to_gizmos_response(JSON.parse(safe_internal_res.body))
    end

    sig do
      override.params(
        factors: T.nilable(T::Array[String])
      ).returns(
        BasketryExample::V1::Types::Gizmo
      )
    end
    def update_gizmo(factors: nil)
      safe_internal_uri = URI("#{@api_root}/v1/gizmos")
      safe_internal_uri.query = URI.encode_www_form(
        {
          'factors': factors,
        }.compact
      )
      safe_internal_req = Net::HTTP::Put.new(safe_internal_uri)
      safe_internal_res = Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
      map_dto_to_gizmo(JSON.parse(safe_internal_res.body))
    end
  end
end
