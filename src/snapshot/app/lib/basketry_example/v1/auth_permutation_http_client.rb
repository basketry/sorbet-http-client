# This code was generated by @basketry/sorbet-http-client@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.
#
# To make changes to the contents of this file:
# 1. Edit source/path.ext
# 2. Run the Basketry CLI
#
# About Basketry: https://github.com/basketry/basketry/wiki
# About @basketry/sorbet-http-client: https://github.com/basketry/sorbet-http-client#readme

# frozen_string_literal: true

# typed: strict

module BasketryExample::V1
  class AuthPermutationHttpClient
    extend T::Sig

    include BasketryExample::V1::AuthPermutationService
    include BasketryExample::V1::HttpClientHelpers

    sig { params(api_root: String, basic_auth: String, alternate_basic_auth: String, api_key_auth: String, oauth2_auth: String, alternate_api_key_auth: String).void }
    def initialize(api_root:, basic_auth:, alternate_basic_auth:, api_key_auth:, oauth2_auth:, alternate_api_key_auth:)
      @api_root = api_root
      @basic_auth = basic_auth
      @alternate_basic_auth = alternate_basic_auth
      @api_key_auth = api_key_auth
      @oauth2_auth = oauth2_auth
      @alternate_api_key_auth = alternate_api_key_auth
    end

    sig { override.void }
    def all_auth_schemes
      safe_internal_uri = URI("#{@api_root}/v1/authPermutations")
      safe_internal_req = Net::HTTP::Get.new(safe_internal_uri)
      safe_internal_req['x-apikey'] = @api_key_auth
      Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
    end

    sig { override.void }
    def combo_auth_schemes
      safe_internal_uri = URI("#{@api_root}/v1/authPermutations")
      safe_internal_req = Net::HTTP::Put.new(safe_internal_uri)
      safe_internal_req['x-apikey'] = @api_key_auth
      Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
    end
  end
end
