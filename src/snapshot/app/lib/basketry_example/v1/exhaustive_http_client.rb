# This code was generated by @basketry/sorbet-http-client@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.
#
# To make changes to the contents of this file:
# 1. Edit source/path.ext
# 2. Run the Basketry CLI
#
# About Basketry: https://github.com/basketry/basketry/wiki
# About @basketry/sorbet-http-client: https://github.com/basketry/sorbet-http-client#readme

# frozen_string_literal: true

# typed: strict

module BasketryExample::V1
  class ExhaustiveHttpClient
    extend T::Sig

    include BasketryExample::V1::ExhaustiveService
    include BasketryExample::V1::HttpClientHelpers

    sig { params(api_root: String).void }
    def initialize(api_root:)
      @api_root = api_root
    end

    sig do
      override.params(
        string_no_format: T.nilable(String),
        string_date: T.nilable(Date),
        string_date_time: T.nilable(DateTime),
        integer_no_format: T.nilable(Integer),
        integer_int32: T.nilable(Integer),
        integer_int64: T.nilable(Integer),
        number_no_format: T.nilable(Numeric),
        number_float: T.nilable(Float),
        number_double: T.nilable(Float)
      ).void
    end
    def exhaustive_formats(string_no_format: nil, string_date: nil, string_date_time: nil, integer_no_format: nil, integer_int32: nil, integer_int64: nil, number_no_format: nil, number_float: nil, number_double: nil)
      safe_internal_uri = URI("#{@api_root}/v1/exhaustive")
      safe_internal_uri.query = URI.encode_www_form(
        {
          'string-no-format': string_no_format,
          'string-date': string_date,
          'string-date-time': string_date_time,
          'integer-no-format': integer_no_format,
          'integer-int32': integer_int32,
          'integer-int64': integer_int64,
          'number-no-format': number_no_format,
          'number-float': number_float,
          'number-double': number_double,
        }.compact
      )
      safe_internal_req = Net::HTTP::Get.new(safe_internal_uri)
      Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
    end

    sig do
      override.params(
        path_string: String,
        path_enum: BasketryExample::V1::Enums::ExhaustiveParamsPathEnum,
        path_number: Numeric,
        path_integer: Integer,
        path_boolean: T::Boolean,
        path_string_array: T::Array[String],
        path_enum_array: T::Array[BasketryExample::V1::Enums::ExhaustiveParamsPathEnumArray],
        path_number_array: T::Array[Numeric],
        path_integer_array: T::Array[Integer],
        path_boolean_array: T::Array[T::Boolean],
        query_string: T.nilable(String),
        query_enum: T.nilable(BasketryExample::V1::Enums::ExhaustiveParamsQueryEnum),
        query_number: T.nilable(Numeric),
        query_integer: T.nilable(Integer),
        query_boolean: T.nilable(T::Boolean),
        query_string_array: T.nilable(T::Array[String]),
        query_enum_array: T.nilable(T::Array[BasketryExample::V1::Enums::ExhaustiveParamsQueryEnumArray]),
        query_number_array: T.nilable(T::Array[Numeric]),
        query_integer_array: T.nilable(T::Array[Integer]),
        query_boolean_array: T.nilable(T::Array[T::Boolean]),
        header_string: T.nilable(String),
        header_enum: T.nilable(BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnum),
        header_number: T.nilable(Numeric),
        header_integer: T.nilable(Integer),
        header_boolean: T.nilable(T::Boolean),
        header_string_array: T.nilable(T::Array[String]),
        header_enum_array: T.nilable(T::Array[BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnumArray]),
        header_number_array: T.nilable(T::Array[Numeric]),
        header_integer_array: T.nilable(T::Array[Integer]),
        header_boolean_array: T.nilable(T::Array[T::Boolean]),
        body: T.nilable(BasketryExample::V1::Types::ExhaustiveParamsBody)
      ).void
    end
    def exhaustive_params(path_string:, path_enum:, path_number:, path_integer:, path_boolean:, path_string_array:, path_enum_array:, path_number_array:, path_integer_array:, path_boolean_array:, query_string: nil, query_enum: nil, query_number: nil, query_integer: nil, query_boolean: nil, query_string_array: nil, query_enum_array: nil, query_number_array: nil, query_integer_array: nil, query_boolean_array: nil, header_string: nil, header_enum: nil, header_number: nil, header_integer: nil, header_boolean: nil, header_string_array: nil, header_enum_array: nil, header_number_array: nil, header_integer_array: nil, header_boolean_array: nil, body: nil)
      safe_internal_uri = URI("#{@api_root}/v1/exhaustive/#{path_string}/#{path_enum}/#{path_number}/#{path_integer}/#{path_boolean}/#{path_string_array}/#{path_enum_array}/#{path_number_array}/#{path_integer_array}/#{path_boolean_array}")
      safe_internal_uri.query = URI.encode_www_form(
        {
          'query-string': query_string,
          'query-enum': query_enum,
          'query-number': query_number,
          'query-integer': query_integer,
          'query-boolean': query_boolean,
          'query-string-array': query_string_array,
          'query-enum-array': query_enum_array,
          'query-number-array': query_number_array,
          'query-integer-array': query_integer_array,
          'query-boolean-array': query_boolean_array,
        }.compact
      )
      safe_internal_req = Net::HTTP::Get.new(safe_internal_uri)
      safe_internal_req['header-string'] = header_string
      safe_internal_req['header-enum'] = header_enum
      safe_internal_req['header-number'] = header_number
      safe_internal_req['header-integer'] = header_integer
      safe_internal_req['header-boolean'] = header_boolean
      safe_internal_req['header-string-array'] = header_string_array
      safe_internal_req['header-enum-array'] = header_enum_array
      safe_internal_req['header-number-array'] = header_number_array
      safe_internal_req['header-integer-array'] = header_integer_array
      safe_internal_req['header-boolean-array'] = header_boolean_array
      safe_internal_req.body = map_exhaustive_params_body_to_dto(body).to_s if !body.nil?
      Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
    end
  end
end
