# This code was generated by @basketry/sorbet-http-client@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.
#
# To make changes to the contents of this file:
# 1. Edit source/path.ext
# 2. Run the Basketry CLI
#
# About Basketry: https://github.com/basketry/basketry/wiki
# About @basketry/sorbet-http-client: https://github.com/basketry/sorbet-http-client#readme

# frozen_string_literal: true

# typed: strict

module BasketryExample::V1
  class WidgetHttpClient
    extend T::Sig

    include BasketryExample::V1::WidgetService
    include BasketryExample::V1::HttpClientHelpers

    sig { params(api_root: String, api_key_auth: String).void }
    def initialize(api_root:, api_key_auth:)
      @api_root = api_root
      @api_key_auth = api_key_auth
    end

    sig do
      override.params(
        body: T.nilable(BasketryExample::V1::Types::CreateWidgetBody)
      ).void
    end
    def create_widget(body: nil)
      safe_internal_uri = URI("#{@api_root}/v1/widgets")
      safe_internal_req = Net::HTTP::Post.new(safe_internal_uri)
      safe_internal_req['x-apikey'] = @api_key_auth
      safe_internal_req.body = map_create_widget_body_to_dto(body).to_s if !body.nil?
      Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
    end

    sig do
      override.params(
        id: String
      ).void
    end
    def delete_widget_foo(id:)
      safe_internal_uri = URI("#{@api_root}/v1/widgets/#{id}/foo")
      safe_internal_req = Net::HTTP::Delete.new(safe_internal_uri)
      safe_internal_req['x-apikey'] = @api_key_auth
      Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
    end

    sig do
      override.params(
        id: String
      ).returns(
        BasketryExample::V1::Types::Widget
      )
    end
    def get_widget_foo(id:)
      safe_internal_uri = URI("#{@api_root}/v1/widgets/#{id}/foo")
      safe_internal_req = Net::HTTP::Get.new(safe_internal_uri)
      safe_internal_req['x-apikey'] = @api_key_auth
      safe_internal_res = Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
      map_dto_to_widget(JSON.parse(safe_internal_res.body))
    end

    sig { override.returns(BasketryExample::V1::Types::Widget) }
    def get_widgets
      safe_internal_uri = URI("#{@api_root}/v1/widgets")
      safe_internal_req = Net::HTTP::Get.new(safe_internal_uri)
      safe_internal_req['x-apikey'] = @api_key_auth
      safe_internal_res = Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
      map_dto_to_widget(JSON.parse(safe_internal_res.body))
    end

    sig { override.void }
    def put_widget
      safe_internal_uri = URI("#{@api_root}/v1/widgets")
      safe_internal_req = Net::HTTP::Put.new(safe_internal_uri)
      safe_internal_req['x-apikey'] = @api_key_auth
      Net::HTTP.start(safe_internal_uri.hostname, safe_internal_uri.port) { |http| http.request(safe_internal_req) }
    end
  end
end
